version: '3.8'

services:
  backend:
    build:
      context: ./backend  # путь к папке с фронтендом
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/3d_printer_db
      - ALLOWED_HOSTS=*
      - ALLOW_CORS=true
      - CORS_ALLOW_ORIGINS=*
      - CORS_ALLOW_CREDENTIALS=true
      - CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS
      - CORS_ALLOW_HEADERS=*
    restart: unless-stopped
    depends_on:
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend  # путь к папке с фронтендом
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - app-network

  db:
    image: postgres:13
    container_name: 3d_printer_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: 3d_printer_db
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Убедитесь, что этот том правильно настроен
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:  # Убедитесь, что том объявлен здесь

networks:
  app-network:
    driver: bridge